/*
 * Copyright (c) 2024, NVIDIA CORPORATION.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * NOTE: this file is generated by compute_distance_00_generate.py
 *
 * Make changes there and run in this directory:
 *
 * > python compute_distance_00_generate.py
 *
 */


#pragma once

#include "compute_distance_standard.hpp"


namespace ffanns::neighbors::cagra::detail {

using namespace ffanns::distance;

extern template struct standard_descriptor_spec<DistanceType::L2Expanded, 8, 128, float, uint32_t, float>;
extern template struct standard_descriptor_spec<DistanceType::InnerProduct, 8, 128, float, uint32_t, float>;
extern template struct standard_descriptor_spec<DistanceType::L2Expanded, 16, 256, float, uint32_t, float>;
extern template struct standard_descriptor_spec<DistanceType::InnerProduct, 16, 256, float, uint32_t, float>;
extern template struct standard_descriptor_spec<DistanceType::L2Expanded, 32, 512, float, uint32_t, float>;
extern template struct standard_descriptor_spec<DistanceType::InnerProduct, 32, 512, float, uint32_t, float>;
extern template struct standard_descriptor_spec<DistanceType::L2Expanded, 8, 128, uint8_t, uint32_t, float>;
extern template struct standard_descriptor_spec<DistanceType::InnerProduct, 8, 128, uint8_t, uint32_t, float>;
extern template struct standard_descriptor_spec<DistanceType::L2Expanded, 16, 256, uint8_t, uint32_t, float>;
extern template struct standard_descriptor_spec<DistanceType::InnerProduct, 16, 256, uint8_t, uint32_t, float>;
extern template struct standard_descriptor_spec<DistanceType::L2Expanded, 32, 512, uint8_t, uint32_t, float>;
extern template struct standard_descriptor_spec<DistanceType::InnerProduct, 32, 512, uint8_t, uint32_t, float>;

extern template struct
  instance_selector<standard_descriptor_spec<DistanceType::L2Expanded, 8, 128, float, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::InnerProduct, 8, 128, float, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::L2Expanded, 16, 256, float, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::InnerProduct, 16, 256, float, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::L2Expanded, 32, 512, float, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::InnerProduct, 32, 512, float, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::L2Expanded, 8, 128, uint8_t, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::InnerProduct, 8, 128, uint8_t, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::L2Expanded, 16, 256, uint8_t, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::InnerProduct, 16, 256, uint8_t, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::L2Expanded, 32, 512, uint8_t, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::InnerProduct, 32, 512, uint8_t, uint32_t, float>>;

using descriptor_instances =
  instance_selector<standard_descriptor_spec<DistanceType::L2Expanded, 8, 128, float, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::InnerProduct, 8, 128, float, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::L2Expanded, 16, 256, float, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::InnerProduct, 16, 256, float, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::L2Expanded, 32, 512, float, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::InnerProduct, 32, 512, float, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::L2Expanded, 8, 128, uint8_t, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::InnerProduct, 8, 128, uint8_t, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::L2Expanded, 16, 256, uint8_t, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::InnerProduct, 16, 256, uint8_t, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::L2Expanded, 32, 512, uint8_t, uint32_t, float>,
                    standard_descriptor_spec<DistanceType::InnerProduct, 32, 512, uint8_t, uint32_t, float>>;

template <typename DataT, typename IndexT, typename DistanceT, typename DatasetT>
auto dataset_descriptor_init(const cagra::search_params& params,
                              const DatasetT& dataset,
                              const DatasetT& d_dataset,
                              ffanns::distance::DistanceType metric)
  -> dataset_descriptor_host<DataT, IndexT, DistanceT>
{
  auto [init, priority] = descriptor_instances::select<DataT, IndexT, DistanceT>(params, dataset, d_dataset, metric);
  if (init == nullptr || priority < 0) {
    RAFT_FAIL("No dataset descriptor instance compiled for this parameter combination.");
  }
  return init(params, dataset, d_dataset, metric);
}


}  // namespace ffanns::neighbors::cagra::detail
